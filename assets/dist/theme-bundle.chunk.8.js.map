{"version":3,"sources":["webpack:///./assets/js/theme/common/form-utils.js","webpack:///./node_modules/lodash/_baseIteratee.js","webpack:///./assets/js/theme/common/state-country.js","webpack:///./node_modules/lodash/each.js","webpack:///./node_modules/lodash/transform.js","webpack:///./node_modules/lodash/_baseForOwn.js","webpack:///./node_modules/lodash/_baseFor.js","webpack:///./node_modules/lodash/_createBaseFor.js","webpack:///./assets/js/theme/common/form-validation.js","webpack:///./assets/js/theme/auth.js"],"names":["inputTagNames","classifyForm","formSelector","options","$form","$","$inputs","find","join","formFieldClass","each","__","input","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","addClass","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","$field","fieldId","match","length","getFieldId","value","after","Validators","setEmailValidation","validator","field","add","selector","validate","cb","val","forms","email","errorMessage","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","result","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","data","Object","keys","nod","classes","forEach","hasClass","removeClass","module","exports","stateElement","context","callback","on","event","countryName","currentTarget","utils","api","country","getByName","err","response","showAlertModal","state_error","$currentInput","states","newElement","attrs","item","ret","replacementAttributes","id","class","replaceWith","$newElement","prev","hide","makeStateOptional","$selectElement","$hiddenInput","remove","append","required","show","makeStateRequired","statesArray","container","push","prefix","stateObj","useIdForStates","html","addOptions","array","iteratee","index","arrayEach","baseCreate","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isObject","isTypedArray","object","accumulator","isArr","isArrLike","Ctor","constructor","baseFor","createBaseFor","fromRight","keysFunc","iterable","props","key","buildValidation","$validateableElement","validation","fieldValidations","formFieldSelector","attr","dateValidation","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","triggeredBy","day","Number","month","year","chosenDate","buildDateValidation","element","$inputElement","get","inputName","elementSelector","label","min","max","numberVal","buildNumberRangeValidation","buildRequiredValidation","formFieldId","secondarySelector","checkbox","checked","buildRequiredCheckboxValidation","validationsToPerform","concat","Auth","formCreateSelector","registerLoginValidation","$loginForm","loginModel","this","loginValidator","submit","useValidEmail","password","enterPass","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","forgotPasswordValidator","registerNewPasswordValidation","newPasswordValidator","newPasswordForm","passwordRequirements","registerCreateAccountValidator","$createAccountForm","$last","validationModel","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","stateCountry","Error","getStatus","is","onReady","$newPasswordForm","PageManager"],"mappings":"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","file":"theme-bundle.chunk.8.js","sourcesContent":["import $ from 'jquery';\nimport _ from 'lodash';\nimport nod from './nod';\nimport forms from './models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setEmailValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a valid email.',\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: requirements.error,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: 'Your passwords do not match.',\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Max. price is required.',\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Min. price is required.',\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Input must be greater than 0.',\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","import $ from 'jquery';\nimport utils from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport { insertStateHiddenField } from './form-utils';\nimport { showAlertModal } from '../global/modal';\n\n/**\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\n * @returns {jQuery|HTMLElement}\n */\nfunction makeStateRequired(stateElement, context) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n        return ret;\n    });\n\n    const replacementAttributes = {\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-select',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\n\n    if ($hiddenInput.length !== 0) {\n        $hiddenInput.remove();\n    }\n\n    if ($newElement.prev().find('small').length === 0) {\n        // String is injected from localizer\n        $newElement.prev().append(`<small>${context.required}</small>`);\n    } else {\n        $newElement.prev().find('small').show();\n    }\n\n    return $newElement;\n}\n\n/**\n * If a country with states is the default, a select will be sent,\n * In this case we need to be able to switch to an input field and hide the required field\n */\nfunction makeStateOptional(stateElement) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n\n        return ret;\n    });\n\n    const replacementAttributes = {\n        type: 'text',\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-input',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<input />', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n\n    if ($newElement.length !== 0) {\n        insertStateHiddenField($newElement);\n        $newElement.prev().find('small').hide();\n    }\n\n    return $newElement;\n}\n\n/**\n * Adds the array of options from the remote request to the newly created select box.\n * @param {Object} statesArray\n * @param {jQuery} $selectElement\n * @param {Object} options\n */\nfunction addOptions(statesArray, $selectElement, options) {\n    const container = [];\n\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\n\n    if (!_.isEmpty($selectElement)) {\n        _.each(statesArray.states, (stateObj) => {\n            if (options.useIdForStates) {\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\n            } else {\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\n            }\n        });\n\n        $selectElement.html(container.join(' '));\n    }\n}\n\n/**\n *\n * @param {jQuery} stateElement\n * @param {Object} context\n * @param {Object} options\n * @param {Function} callback\n */\nexport default function (stateElement, context = {}, options, callback) {\n    /**\n     * Backwards compatible for three parameters instead of four\n     *\n     * Available options:\n     *\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\n     */\n    if (typeof options === 'function') {\n        /* eslint-disable no-param-reassign */\n        callback = options;\n        options = {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    $('select[data-field-type=\"Country\"]').on('change', event => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                showAlertModal(context.state_error);\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    });\n}\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","import $ from 'jquery';\n\n/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n */\nfunction buildRequiredCheckboxValidation($formField, validation) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation($validateableElement, validation));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @returns {Array}\n */\nexport default function ($form) {\n    let validationsToPerform = [];\n\n    $form.find('[data-validation]').each((index, input) => {\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input)));\n    });\n\n    return validationsToPerform;\n}\n","import PageManager from './page-manager';\nimport $ from 'jquery';\nimport stateCountry from './common/state-country';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport { classifyForm, Validators } from './common/form-utils';\n\nexport default class Auth extends PageManager {\n    constructor(context) {\n        super(context);\n        this.formCreateSelector = 'form[data-create-account-form]';\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.enterPass,\n            },\n        ]);\n\n        $loginForm.on('submit', event => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.useValidEmail,\n            },\n        ]);\n\n        $forgotPasswordForm.on('submit', event => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements,\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector);\n        }\n\n        if ($passwordElement && $password2Element) {\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements,\n            );\n        }\n\n        $createAccountForm.on('submit', event => {\n            createAccountValidator.performCheck();\n\n            if (createAccountValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     */\n    onReady() {\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n    }\n}\n"],"sourceRoot":""}